/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// Generated by unplugin-vue-router. ‼️ DO NOT MODIFY THIS FILE ‼️
// It's recommended to commit this file.
// Make sure to add this file to your tsconfig.json file as an "includes" or "files" entry.

declare module 'vue-router/auto-routes' {
  import type {
    RouteRecordInfo,
    ParamValue,
    ParamValueOneOrMore,
    ParamValueZeroOrMore,
    ParamValueZeroOrOne,
  } from 'vue-router'

  /**
   * Route name map generated by unplugin-vue-router
   */
  export interface RouteNamedMap {
    '/(home)': RouteRecordInfo<'/(home)', '/', Record<never, never>, Record<never, never>>,
    '/bug-reports/(bug-reports)': RouteRecordInfo<'/bug-reports/(bug-reports)', '/bug-reports', Record<never, never>, Record<never, never>>,
    '/bug-reports/issue-154': RouteRecordInfo<'/bug-reports/issue-154', '/bug-reports/issue-154', Record<never, never>, Record<never, never>>,
    '/bug-reports/issue-155': RouteRecordInfo<'/bug-reports/issue-155', '/bug-reports/issue-155', Record<never, never>, Record<never, never>>,
    '/bug-reports/issue-174': RouteRecordInfo<'/bug-reports/issue-174', '/bug-reports/issue-174', Record<never, never>, Record<never, never>, '/bug-reports/issue-174/[slug]'>,
    '/bug-reports/issue-174/[slug]': RouteRecordInfo<'/bug-reports/issue-174/[slug]', '/bug-reports/issue-174/:slug', { slug: ParamValue<true> }, { slug: ParamValue<false> }>,
    '/bug-reports/issue-267': RouteRecordInfo<'/bug-reports/issue-267', '/bug-reports/issue-267', Record<never, never>, Record<never, never>>,
    '/bug-reports/issue-290': RouteRecordInfo<'/bug-reports/issue-290', '/bug-reports/issue-290', Record<never, never>, Record<never, never>>,
    '/cat-facts': RouteRecordInfo<'/cat-facts', '/cat-facts', Record<never, never>, Record<never, never>>,
    '/contacts': RouteRecordInfo<'/contacts', '/contacts', Record<never, never>, Record<never, never>, '/contacts/[id]'>,
    '/contacts/[id]': RouteRecordInfo<'/contacts/[id]', '/contacts/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    '/ecom/': RouteRecordInfo<'/ecom/', '/ecom', Record<never, never>, Record<never, never>>,
    '/ecom/item/[id]': RouteRecordInfo<'/ecom/item/[id]', '/ecom/item/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    '/hmr-tests/(hmr-tests)': RouteRecordInfo<'/hmr-tests/(hmr-tests)', '/hmr-tests', Record<never, never>, Record<never, never>>,
    '/hmr-tests/defined-query': RouteRecordInfo<'/hmr-tests/defined-query', '/hmr-tests/defined-query', Record<never, never>, Record<never, never>>,
    '/hmr-tests/local-use-query': RouteRecordInfo<'/hmr-tests/local-use-query', '/hmr-tests/local-use-query', Record<never, never>, Record<never, never>>,
    '/suspense/contacts': RouteRecordInfo<'/suspense/contacts', '/suspense/contacts', Record<never, never>, Record<never, never>, '/suspense/contacts/[id]'>,
    '/suspense/contacts/[id]': RouteRecordInfo<'/suspense/contacts/[id]', '/suspense/contacts/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    '/warnings/(warnings)': RouteRecordInfo<'/warnings/(warnings)', '/warnings', Record<never, never>, Record<never, never>>,
    '/warnings/duped-[contactId]': RouteRecordInfo<'/warnings/duped-[contactId]', '/warnings/duped-:contactId', { contactId: ParamValue<true> }, { contactId: ParamValue<false> }>,
    '/warnings/usage-one-[contactId]': RouteRecordInfo<'/warnings/usage-one-[contactId]', '/warnings/usage-one-:contactId', { contactId: ParamValue<true> }, { contactId: ParamValue<false> }>,
    '/warnings/usage-two-[contactId]': RouteRecordInfo<'/warnings/usage-two-[contactId]', '/warnings/usage-two-:contactId', { contactId: ParamValue<true> }, { contactId: ParamValue<false> }>,
  }

  /**
   * Route file to route info map by unplugin-vue-router.
   * Used by the volar plugin to automatically type useRoute()
   *
   * Each key is a file path relative to the project root with 2 properties:
   * - routes: union of route names of the possible routes when in this page (passed to useRoute<...>())
   * - views: names of nested views (can be passed to <RouterView name="...">)
   *
   * @internal
   */
  export interface _RouteFileInfoMap {
    'src/pages/(home).vue': {
      routes: '/(home)'
      views: never
    }
    'src/pages/bug-reports/(bug-reports).vue': {
      routes: '/bug-reports/(bug-reports)'
      views: never
    }
    'src/pages/bug-reports/issue-154.vue': {
      routes: '/bug-reports/issue-154'
      views: never
    }
    'src/pages/bug-reports/issue-155.vue': {
      routes: '/bug-reports/issue-155'
      views: never
    }
    'src/pages/bug-reports/issue-174.vue': {
      routes: '/bug-reports/issue-174' | '/bug-reports/issue-174/[slug]'
      views: 'default'
    }
    'src/pages/bug-reports/issue-174/[slug].vue': {
      routes: '/bug-reports/issue-174/[slug]'
      views: never
    }
    'src/pages/bug-reports/issue-267.vue': {
      routes: '/bug-reports/issue-267'
      views: never
    }
    'src/pages/bug-reports/issue-290.vue': {
      routes: '/bug-reports/issue-290'
      views: never
    }
    'src/pages/cat-facts.vue': {
      routes: '/cat-facts'
      views: never
    }
    'src/pages/contacts.vue': {
      routes: '/contacts' | '/contacts/[id]'
      views: 'default'
    }
    'src/pages/contacts/[id].vue': {
      routes: '/contacts/[id]'
      views: never
    }
    'src/pages/ecom/index.vue': {
      routes: '/ecom/'
      views: never
    }
    'src/pages/ecom/item/[id].vue': {
      routes: '/ecom/item/[id]'
      views: never
    }
    'src/pages/hmr-tests/(hmr-tests).vue': {
      routes: '/hmr-tests/(hmr-tests)'
      views: never
    }
    'src/pages/hmr-tests/defined-query.vue': {
      routes: '/hmr-tests/defined-query'
      views: never
    }
    'src/pages/hmr-tests/local-use-query.vue': {
      routes: '/hmr-tests/local-use-query'
      views: never
    }
    'src/pages/suspense/contacts.vue': {
      routes: '/suspense/contacts' | '/suspense/contacts/[id]'
      views: 'default'
    }
    'src/pages/suspense/contacts/[id].vue': {
      routes: '/suspense/contacts/[id]'
      views: never
    }
    'src/pages/warnings/(warnings).vue': {
      routes: '/warnings/(warnings)'
      views: never
    }
    'src/pages/warnings/duped-[contactId].vue': {
      routes: '/warnings/duped-[contactId]'
      views: never
    }
    'src/pages/warnings/usage-one-[contactId].vue': {
      routes: '/warnings/usage-one-[contactId]'
      views: never
    }
    'src/pages/warnings/usage-two-[contactId].vue': {
      routes: '/warnings/usage-two-[contactId]'
      views: never
    }
  }

  /**
   * Get a union of possible route names in a certain route component file.
   * Used by the volar plugin to automatically type useRoute()
   *
   * @internal
   */
  export type _RouteNamesForFilePath<FilePath extends string> =
    _RouteFileInfoMap extends Record<FilePath, infer Info>
      ? Info['routes']
      : keyof RouteNamedMap
}
